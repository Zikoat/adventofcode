import { ass, asseq } from "../2023/ts/common";

const testa = `............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............`;
const real = `....K..........................8.................z
.....n..............r...........z.................
.......................w....8.............3...E...
.....Q.....U..4.........8.........................
...............rc...w........i....................
...........K.........i..2.........................
..................4.....i.........................
K.....n....................w...........z..........
..U......Q........................I...............
..........i.....I.....Q....g....................5E
..Q......................................5........
..........c............8......w...g..........5....
.............................I.O..................
.Z.............4....b.....................k.......
..n........4......r..g..6..c.............3........
....Z............c................................
...................................x..............
.......................................O..........
...............U...................E..........5...
.....f..........................OI3......k........
..m.......o......F.......R........x...............
m...........o..v6..3...............X..............
..............H6v.....F.g.....................W...
...........o....Fb....v...............E...........
...Z.............a................................
......U6.............V............................
.9.............b..............pTk.................
.......m........V.........H1....x.................
...m.................H....................MX......
............t.a............H......................
........Z...a............v.....1..T..p.W..X.......
.............................9...x.......p........
.....J.....................V..1................0..
...........r..j..........a............pT..........
.G..................J...N......f..................
...........G......T....B........W.e...........M...
..........j.............Rk.............M..........
.........q.............MB......R.F..1..P....X...f.
............................V....o...........h....
...........................................W......
......b......u............................e.......
.............................................0....
..CA....Gt..O........................7.....e....0.
C.u......A..9J..N........................h.....e..
uj....q..........N.2..................7...........
G....N.....uJ...............................0.....
.................B................P.......h.......
...C....q...........R.........P...................
.....q..tC....2.9.....B............P....f.........
...............2.................................7`;

asseq(p1(testa), 14);
asseq(p1(real), 344);
function p1(input: string): number {
  const coordinates: Record<string, { x: number; y: number }[]> = {};

  const shit = input.split("\n").map((row, y) =>
    row.split("").map((char, x) => {
      if (char === ".") return ".";
      let antennasForFreq = coordinates[char];
      if (!antennasForFreq) {
        coordinates[char] = [];
        antennasForFreq = coordinates[char];
      }
      antennasForFreq.push({ x, y });
      return char;
    })
  );

  // asseq(coordinates, {
  //   "0": [
  //     { x: 8, y: 1 },
  //     { x: 5, y: 2 },
  //     { x: 7, y: 3 },
  //     { x: 4, y: 4 },
  //   ],
  //   A: [
  //     { x: 6, y: 5 },
  //     { x: 8, y: 8 },
  //     { x: 9, y: 9 },
  //   ],
  // });
  // console.table(shit);
  // asseq(shit)
  // console.log(shit.map(a => a.join("")).join("\n"))
  const antinodes: boolean[][] = [];
  let score = 0;

  const entries = Object.values(coordinates);
  for (const entry of entries) {
    const acoords = entry;

    for (let i = 0; i < acoords.length; i++) {
      const ian = acoords[i];
      for (let j = 0; j < acoords.length; j++) {
        if (j === i) continue;
        const jan = acoords[j];
        ass(ian);
        ass(jan);

        const difference = { x: ian.x - jan.x, y: ian.y - jan.y };
        const antinode = { x: ian.x + difference.x, y: ian.y + difference.y };
        // console.log(antinode);
        let rowanti = antinodes[antinode.y];
        if (!rowanti) {
          antinodes[antinode.y] = [];

          rowanti = antinodes[antinode.y];
          ass(rowanti);
        }
        // we could go through the antinodes and count instead of doing this logic. might be easier, but this is more perf?
        if (shit[antinode.y]?.[antinode.x] && !rowanti[antinode.x]) {
          score++;
        }

        rowanti[antinode.x] = true;

        const row = shit[antinode.y];
        if (row?.[antinode.x]) {
          row[antinode.x] = "#";
        }
      }
    }
  }

  // console.table(antinodes);
  // console.table(shit);

  return score;
}
